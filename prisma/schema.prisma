// ============================================================================
// PRISMA SCHEMA FOR BUS TRANSPORTATION PLATFORM
// ============================================================================

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// ============================================================================
// ENUMS
// ============================================================================

enum UserStatus {
    ACTIVE
    INACTIVE
    SUSPENDED
    PENDING_VERIFICATION
}

enum UserType {
    PASSENGER
    DRIVER
    ADMIN
    SYSTEM
}

enum LocationType {
    PICKUP
    DROPOFF
    BOTH
}

enum TripStatus {
    SCHEDULED
    READY_FOR_BOARDING
    BOARDING
    IN_PROGRESS
    COMPLETED
    CANCELLED
    DELAYED
}

enum LocationStage {
    PICKUP
    DROPOFF
}

enum BookingStatus {
    CONFIRMED
    BOARDED
    COMPLETED
    CANCELLED
    NO_SHOW
}

enum PaymentStatus {
    PENDING
    COMPLETED
    FAILED
    REFUNDED
    PARTIALLY_REFUNDED
}

enum PaymentMethods {
    CREDIT_CARD
    DEBIT_CARD
    DIGITAL_WALLET
    BANK_TRANSFER
    CASH
}

enum DriverStatus {
    AVAILABLE
    ON_TRIP
    OFF_DUTY
    SUSPENDED
}

enum NotificationType {
    TRIP_ASSIGNED
    TRIP_REMINDER
    TRIP_CANCELLED
    TRIP_DELAYED
    BOOKING_CONFIRMED
    PAYMENT_SUCCESSFUL
    SYSTEM_ALERT
}

enum NotificationChannel {
    PUSH
    EMAIL
    SMS
    IN_APP
}

// ============================================================================
// USER MANAGEMENT
// ============================================================================

model User {
    id              String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    email           String     @unique @db.VarChar(255)
    phoneNumber     String?    @unique @db.VarChar(20)
    passwordHash    String     @db.VarChar(255)
    firstName       String     @db.VarChar(100)
    lastName        String     @db.VarChar(100)
    userType        UserType   @default(PASSENGER)
    status          UserStatus @default(PENDING_VERIFICATION)
    emailVerified   Boolean    @default(false)
    phoneVerified   Boolean    @default(false)
    profileImageUrl String?    @db.Text
    dateOfBirth     DateTime?  @db.Date
    lastLoginAt     DateTime?  @db.Timestamptz(3)
    createdAt       DateTime   @default(now()) @db.Timestamptz(3)
    updatedAt       DateTime   @updatedAt @db.Timestamptz(3)

    // Relations
    bookings         Booking[]
    driver           Driver?
    userRoles        UserRole[]
    createdLocations Location[]      @relation("LocationCreator")
    createdRoutes    Route[]         @relation("RouteCreator")
    notifications    Notification[]
    paymentMethods   PaymentMethod[]
    auditLogs        AuditLog[]
    assignedRoles    UserRole[]      @relation("RoleAssigner")

    @@index([email])
    @@index([phoneNumber])
    @@index([status])
    @@map("users")
}

// ============================================================================
// DRIVER MANAGEMENT
// ============================================================================

model Driver {
    id                    String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId                String       @unique @db.Uuid
    licenseNumber         String       @unique @db.VarChar(50)
    licenseExpiryDate     DateTime     @db.Date
    vehicleId             String?      @db.Uuid
    status                DriverStatus @default(AVAILABLE)
    rating                Decimal?     @db.Decimal(3, 2)
    totalTrips            Int          @default(0)
    completedTrips        Int          @default(0)
    cancelledTrips        Int          @default(0)
    emergencyContactName  String       @db.VarChar(255)
    emergencyContactPhone String       @db.VarChar(20)
    backgroundCheckDate   DateTime?    @db.Date
    backgroundCheckStatus String?      @db.VarChar(50)
    isActive              Boolean      @default(true)
    createdAt             DateTime     @default(now()) @db.Timestamptz(3)
    updatedAt             DateTime     @updatedAt @db.Timestamptz(3)

    // Relations
    user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    vehicle         Vehicle?         @relation(fields: [vehicleId], references: [id])
    trips           Trip[]
    driverDocuments DriverDocument[]

    @@index([userId])
    @@index([status])
    @@index([licenseNumber])
    @@map("drivers")
}

model Vehicle {
    id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    registrationNumber    String    @unique @db.VarChar(50)
    make                  String    @db.VarChar(100)
    model                 String    @db.VarChar(100)
    year                  Int
    capacity              Int
    color                 String?   @db.VarChar(50)
    insurancePolicyNumber String    @db.VarChar(100)
    insuranceExpiryDate   DateTime  @db.Date
    lastMaintenanceDate   DateTime? @db.Date
    nextMaintenanceDate   DateTime? @db.Date
    isActive              Boolean   @default(true)
    createdAt             DateTime  @default(now()) @db.Timestamptz(3)
    updatedAt             DateTime  @updatedAt @db.Timestamptz(3)

    // Relations
    drivers Driver[]

    @@index([registrationNumber])
    @@map("vehicles")
}

model DriverDocument {
    id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    driverId     String    @db.Uuid
    documentType String    @db.VarChar(50)
    documentUrl  String    @db.Text
    expiryDate   DateTime? @db.Date
    verifiedAt   DateTime? @db.Timestamptz(3)
    verifiedBy   String?   @db.Uuid
    isActive     Boolean   @default(true)
    createdAt    DateTime  @default(now()) @db.Timestamptz(3)
    updatedAt    DateTime  @updatedAt @db.Timestamptz(3)

    // Relations
    driver Driver @relation(fields: [driverId], references: [id], onDelete: Cascade)

    @@index([driverId])
    @@index([documentType])
    @@map("driver_documents")
}

// ============================================================================
// LOCATION MANAGEMENT
// ============================================================================

model Location {
    id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name           String       @db.VarChar(255)
    address        String       @db.Text
    latitude       Decimal      @db.Decimal(10, 8)
    longitude      Decimal      @db.Decimal(11, 8)
    locationType   LocationType
    facilities     String[]
    operatingHours Json?
    isActive       Boolean      @default(true)
    createdBy      String       @db.Uuid
    createdAt      DateTime     @default(now()) @db.Timestamptz(3)
    updatedAt      DateTime     @updatedAt @db.Timestamptz(3)

    // Relations
    creator         User            @relation("LocationCreator", fields: [createdBy], references: [id])
    pickupBookings  Booking[]       @relation("PickupLocation")
    dropoffBookings Booking[]       @relation("DropoffLocation")
    routePickups    RouteLocation[] @relation("RoutePickup")
    routeDropoffs   RouteLocation[] @relation("RouteDropoff")
    currentTrips    Trip[]

    @@index([locationType])
    @@index([isActive])
    @@index([latitude, longitude])
    @@map("locations")
}

// ============================================================================
// ROUTE MANAGEMENT
// ============================================================================

model Route {
    id                       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    routeName                String   @db.VarChar(255)
    routeCode                String   @unique @db.VarChar(50)
    description              String?  @db.Text
    estimatedDurationMinutes Int
    maxCapacity              Int      @default(50)
    operatingDays            Int[]
    departureTimes           String[] @db.Text
    basePrice                Decimal  @db.Decimal(8, 2)
    perStopPrice             Decimal  @default(0) @db.Decimal(8, 2)
    distanceBasedPricing     Boolean  @default(false)
    isActive                 Boolean  @default(true)
    createdBy                String   @db.Uuid
    createdAt                DateTime @default(now()) @db.Timestamptz(3)
    updatedAt                DateTime @updatedAt @db.Timestamptz(3)

    // Relations
    creator   User            @relation("RouteCreator", fields: [createdBy], references: [id])
    locations RouteLocation[]
    trips     Trip[]

    @@index([routeCode])
    @@index([isActive])
    @@map("routes")
}

model RouteLocation {
    id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    routeId          String        @db.Uuid
    pickupId         String?       @db.Uuid
    dropoffId        String?       @db.Uuid
    sequenceOrder    Int
    locationType     LocationStage
    estimatedArrival String?       @db.Text
    createdAt        DateTime      @default(now()) @db.Timestamptz(3)

    // Relations
    route   Route     @relation(fields: [routeId], references: [id], onDelete: Cascade)
    pickup  Location? @relation("RoutePickup", fields: [pickupId], references: [id])
    dropoff Location? @relation("RouteDropoff", fields: [dropoffId], references: [id])

    @@unique([routeId, locationType])
    @@index([routeId, sequenceOrder])
    @@map("route_locations")
}

// ============================================================================
// TRIP MANAGEMENT
// ============================================================================

model Trip {
    id                   String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    routeId              String        @db.Uuid
    driverId             String?       @db.Uuid
    tripCode             String        @unique @db.VarChar(50)
    scheduledDate        DateTime      @db.Date
    departureTime        String        @db.Text
    status               TripStatus    @default(SCHEDULED)
    currentLocationId    String?       @db.Uuid
    currentLocationIndex Int           @default(0)
    currentLocationStage LocationStage @default(PICKUP)
    passengerCount       Int           @default(0)
    availableSeats       Int
    actualDepartureTime  DateTime?     @db.Timestamptz(3)
    actualArrivalTime    DateTime?     @db.Timestamptz(3)
    startedAt            DateTime?     @db.Timestamptz(3)
    completedAt          DateTime?     @db.Timestamptz(3)
    cancellationReason   String?       @db.Text
    notes                String?       @db.Text
    createdAt            DateTime      @default(now()) @db.Timestamptz(3)
    updatedAt            DateTime      @updatedAt @db.Timestamptz(3)

    // Relations
    route           Route        @relation(fields: [routeId], references: [id])
    driver          Driver?      @relation(fields: [driverId], references: [id])
    currentLocation Location?    @relation(fields: [currentLocationId], references: [id])
    bookings        Booking[]
    tripUpdates     TripUpdate[]

    @@index([routeId])
    @@index([driverId])
    @@index([status])
    @@index([scheduledDate])
    @@index([tripCode])
    @@map("trips")
}

model TripUpdate {
    id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    tripId     String     @db.Uuid
    status     TripStatus
    locationId String?    @db.Uuid
    latitude   Decimal?   @db.Decimal(10, 8)
    longitude  Decimal?   @db.Decimal(11, 8)
    message    String?    @db.Text
    createdAt  DateTime   @default(now()) @db.Timestamptz(3)

    // Relations
    trip Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)

    @@index([tripId, createdAt])
    @@map("trip_updates")
}

// ============================================================================
// BOOKING MANAGEMENT
// ============================================================================

model Booking {
    id                  String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    tripId              String        @db.Uuid
    userId              String        @db.Uuid
    pickupLocationId    String        @db.Uuid
    dropoffLocationId   String        @db.Uuid
    verificationCode    String        @unique @db.VarChar(20)
    qrCodeData          String        @db.Text
    price               Decimal       @db.Decimal(8, 2)
    paymentStatus       PaymentStatus @default(COMPLETED)
    bookingStatus       BookingStatus @default(CONFIRMED)
    specialRequirements String[]
    boardedAt           DateTime?     @db.Timestamptz(3)
    droppedOffAt        DateTime?     @db.Timestamptz(3)
    rating              Int?
    feedback            String?       @db.Text
    cancellationReason  String?       @db.Text
    createdAt           DateTime      @default(now()) @db.Timestamptz(3)
    updatedAt           DateTime      @updatedAt @db.Timestamptz(3)

    // Relations
    trip            Trip     @relation(fields: [tripId], references: [id])
    user            User     @relation(fields: [userId], references: [id])
    pickupLocation  Location @relation("PickupLocation", fields: [pickupLocationId], references: [id])
    dropoffLocation Location @relation("DropoffLocation", fields: [dropoffLocationId], references: [id])
    payment         Payment?

    @@index([tripId])
    @@index([userId])
    @@index([verificationCode])
    @@index([bookingStatus])
    @@index([createdAt])
    @@map("bookings")
}

// ============================================================================
// PAYMENT MANAGEMENT
// ============================================================================

model Payment {
    id                     String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    bookingId              String        @unique @db.Uuid
    amount                 Decimal       @db.Decimal(10, 2)
    currency               String        @default("USD") @db.VarChar(3)
    paymentMethod          PaymentMethod @relation(fields: [paymentMethodId], references: [id])
    paymentStatus          PaymentStatus @default(PENDING)
    transactionId          String?       @unique @db.VarChar(255)
    paymentGateway         String?       @db.VarChar(50)
    paymentGatewayResponse Json?
    refundAmount           Decimal?      @db.Decimal(10, 2)
    refundedAt             DateTime?     @db.Timestamptz(3)
    refundReason           String?       @db.Text
    processingFee          Decimal?      @db.Decimal(10, 2)
    netAmount              Decimal?      @db.Decimal(10, 2)
    paidAt                 DateTime?     @db.Timestamptz(3)
    createdAt              DateTime      @default(now()) @db.Timestamptz(3)
    updatedAt              DateTime      @updatedAt @db.Timestamptz(3)

    // Relations
    booking         Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
    paymentMethodId String  @db.Uuid

    @@index([transactionId])
    @@index([paymentStatus])
    @@index([createdAt])
    @@map("payments")
}

model PaymentMethod {
    id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId         String         @db.Uuid
    type           PaymentMethods
    last4Digits    String?        @db.VarChar(4)
    expiryMonth    Int?
    expiryYear     Int?
    cardBrand      String?        @db.VarChar(50)
    isDefault      Boolean        @default(false)
    isActive       Boolean        @default(true)
    billingAddress Json?
    tokenId        String?        @db.VarChar(255)
    createdAt      DateTime       @default(now()) @db.Timestamptz(3)
    updatedAt      DateTime       @updatedAt @db.Timestamptz(3)

    // Relations
    user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    Payment Payment[]

    @@index([userId])
    @@map("payment_methods")
}

// ============================================================================
// ROLE-BASED ACCESS CONTROL (RBAC)
// ============================================================================

model Role {
    id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name         String   @unique @db.VarChar(100)
    displayName  String   @db.VarChar(255)
    description  String?  @db.Text
    parentRoleId String?  @db.Uuid
    isSystemRole Boolean  @default(false)
    isActive     Boolean  @default(true)
    createdAt    DateTime @default(now()) @db.Timestamptz(3)
    updatedAt    DateTime @updatedAt @db.Timestamptz(3)

    // Relations
    parentRole      Role?            @relation("RoleHierarchy", fields: [parentRoleId], references: [id])
    childRoles      Role[]           @relation("RoleHierarchy")
    userRoles       UserRole[]
    rolePermissions RolePermission[]

    @@index([name])
    @@index([isActive])
    @@map("roles")
}

model Permission {
    id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name            String   @unique @db.VarChar(100)
    displayName     String   @db.VarChar(255)
    description     String?  @db.Text
    resource        String   @db.VarChar(100)
    action          String   @db.VarChar(100)
    contextRequired Boolean  @default(false)
    createdAt       DateTime @default(now()) @db.Timestamptz(3)

    // Relations
    rolePermissions RolePermission[]

    @@index([resource, action])
    @@index([name])
    @@map("permissions")
}

model RolePermission {
    id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    roleId       String   @db.Uuid
    permissionId String   @db.Uuid
    grantedBy    String?  @db.Uuid
    createdAt    DateTime @default(now()) @db.Timestamptz(3)

    // Relations
    role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
    permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

    @@unique([roleId, permissionId])
    @@index([roleId])
    @@index([permissionId])
    @@map("role_permissions")
}

model UserRole {
    id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId      String    @db.Uuid
    roleId      String    @db.Uuid
    contextType String?   @db.VarChar(50)
    contextId   String?   @db.Uuid
    assignedBy  String?   @db.Uuid
    expiresAt   DateTime? @db.Timestamptz(3)
    isActive    Boolean   @default(true)
    createdAt   DateTime  @default(now()) @db.Timestamptz(3)

    // Relations
    user     User  @relation(fields: [userId], references: [id], onDelete: Cascade)
    role     Role  @relation(fields: [roleId], references: [id], onDelete: Cascade)
    assigner User? @relation("RoleAssigner", fields: [assignedBy], references: [id])

    @@unique([userId, roleId, contextType, contextId])
    @@index([userId])
    @@index([roleId])
    @@index([expiresAt])
    @@map("user_roles")
}

// ============================================================================
// NOTIFICATION SYSTEM
// ============================================================================

model Notification {
    id           String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId       String              @db.Uuid
    type         NotificationType
    channel      NotificationChannel
    title        String              @db.VarChar(255)
    message      String              @db.Text
    data         Json?
    isRead       Boolean             @default(false)
    readAt       DateTime?           @db.Timestamptz(3)
    sentAt       DateTime?           @db.Timestamptz(3)
    deliveredAt  DateTime?           @db.Timestamptz(3)
    failedAt     DateTime?           @db.Timestamptz(3)
    errorMessage String?             @db.Text
    createdAt    DateTime            @default(now()) @db.Timestamptz(3)

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId, isRead])
    @@index([type])
    @@index([createdAt])
    @@map("notifications")
}

// ============================================================================
// AUDIT & LOGGING
// ============================================================================

model AuditLog {
    id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId       String?  @db.Uuid
    action       String   @db.VarChar(100)
    resource     String   @db.VarChar(100)
    resourceId   String?  @db.Uuid
    oldValues    Json?
    newValues    Json?
    ipAddress    String?  @db.Inet
    userAgent    String?  @db.Text
    success      Boolean  @default(true)
    errorMessage String?  @db.Text
    createdAt    DateTime @default(now()) @db.Timestamptz(3)

    // Relations
    user User? @relation(fields: [userId], references: [id])

    @@index([userId])
    @@index([resource, resourceId])
    @@index([createdAt])
    @@map("audit_logs")
}

model PermissionAuditLog {
    id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId         String   @db.Uuid
    permissionName String   @db.VarChar(100)
    resourceType   String?  @db.VarChar(50)
    resourceId     String?  @db.Uuid
    action         String   @db.VarChar(100)
    granted        Boolean
    checkedAt      DateTime @default(now()) @db.Timestamptz(3)
    ipAddress      String?  @db.Inet
    userAgent      String?  @db.Text

    @@index([userId])
    @@index([permissionName])
    @@index([checkedAt])
    @@map("permission_audit_logs")
}

// ============================================================================
// ANALYTICS & REPORTING
// ============================================================================

model RouteAnalytics {
    id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    routeId           String   @db.Uuid
    date              DateTime @db.Date
    totalTrips        Int      @default(0)
    completedTrips    Int      @default(0)
    cancelledTrips    Int      @default(0)
    totalPassengers   Int      @default(0)
    totalRevenue      Decimal  @default(0) @db.Decimal(10, 2)
    averageOccupancy  Decimal? @db.Decimal(5, 2)
    onTimePerformance Decimal? @db.Decimal(5, 2)
    createdAt         DateTime @default(now()) @db.Timestamptz(3)
    updatedAt         DateTime @updatedAt @db.Timestamptz(3)

    @@unique([routeId, date])
    @@index([routeId, date])
    @@map("route_analytics")
}

model DriverAnalytics {
    id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    driverId          String   @db.Uuid
    date              DateTime @db.Date
    totalTrips        Int      @default(0)
    completedTrips    Int      @default(0)
    cancelledTrips    Int      @default(0)
    totalPassengers   Int      @default(0)
    averageRating     Decimal? @db.Decimal(3, 2)
    totalRevenue      Decimal  @default(0) @db.Decimal(10, 2)
    onTimePerformance Decimal? @db.Decimal(5, 2)
    createdAt         DateTime @default(now()) @db.Timestamptz(3)
    updatedAt         DateTime @updatedAt @db.Timestamptz(3)

    @@unique([driverId, date])
    @@index([driverId, date])
    @@map("driver_analytics")
}
